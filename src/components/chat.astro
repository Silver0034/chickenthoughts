---
import { Picture } from 'astro:assets'
import Clucky from '../assets/supportReps/pexels-kirsten-buhne-682055-1562389.jpg'
import Scramble from '../assets/supportReps/pexels-pixabay-34770.jpg'
import Nugget from '../assets/supportReps/pexels-pixabay-55834.jpg'
---

<style>
	svg {
		fill: currentColor;
	}
	.toggle {
		--size: 44px;
		--bottom: 13px;
		--left: 4px;
		position: fixed;
		display: grid;
		place-content: center;
		bottom: var(--bottom);
		left: var(--left);
		height: var(--size);
		width: var(--size);
		background-color: var(--color-secondary);
		border: none;
		border-radius: 2rem;
		cursor: pointer;
		z-index: 1000;
		padding: 0.5rem;
		overflow: hidden;
		transition:
			width 0.3s,
			background-color 0.3s,
			color 0.3s;
		z-index: 1;

		@media (prefers-reduced-motion: reduce) {
			transition: none;
		}

		div {
			display: none;
		}

		&[data-status='default'] .default,
		&[data-status='chat-with-us'] .chat-with-us,
		&[data-status='message'] .message {
			display: block;
		}

		.chat-width-us {
			white-space: nowrap;
		}

		&[data-status='default'] {
			&:hover,
			&:focus {
				width: 10rem;
				color: var(--color-background);
				background-color: var(--color-text);

				.default {
					display: none;
				}

				.chat-with-us {
					display: block;
					white-space: nowrap;
				}
			}
		}
	}

	svg {
		height: 1rem;
		width: 1rem;
	}

	.wave {
		display: inline-block;
		animation: wave 2s infinite;
		transform-origin: bottom right;
	}

	@media (prefers-reduced-motion: reduce) {
		.wave {
			animation: none;
		}
	}

	/* Wave animation */
	@keyframes wave {
		0% {
			transform: rotate(0deg);
		}
		10% {
			transform: rotate(14deg);
		}
		20% {
			transform: rotate(-8deg);
		}
		30% {
			transform: rotate(14deg);
		}
		40% {
			transform: rotate(-4deg);
		}
		50% {
			transform: rotate(10deg);
		}
		60% {
			transform: rotate(0deg);
		}
		100% {
			transform: rotate(0deg);
		}
	}

	.window {
		position: fixed;
		padding: 0;
		bottom: 4rem;
		width: 300px;
		max-width: 100%;
		background-color: var(--color-background);
		border: 1px solid var(--color-text);
		border-radius: 1rem;
		overflow: hidden;
		justify-content: center;
		left: 4px;
		bottom: 13px;
		z-index: 2;

		&.closed {
			display: none;
		}

		.minimize {
			position: absolute;
			top: 0.5rem;
			right: 0.5rem;
			padding: 0.5rem;
			background: none;
			border: none;
			color: var(--color-background);
		}

		.info {
			display: flex;
			background-color: var(--color-darker);
			color: var(--color-background);
			padding: 1rem;
			align-items: center;
			gap: 2ch;

			.icon {
				display: inline-block;
				color: var(--color-text);
				background-color: var(--color-background);
				border-radius: 3rem;
				aspect-ratio: 1 / 1;
				margin: 0;
				width: 3rem;
			}
			svg.icon {
				padding: 0.75rem;
				height: 3rem;
				box-sizing: border-box;
				width: 3rem;
			}
			p {
				margin: 0;
				text-align: left;
			}
		}

		&:not([data-status='chat']) {
			.info.chicken {
				display: none;
			}
		}

		&[data-status='chat'] {
			.info.default {
				display: none;
			}
		}

		.messages {
			display: flex;
			flex-direction: column;
			max-height: 300px;
			overflow-y: auto;
			padding: 0.5rem;

			p {
				padding: 0.5rem;
				font-weight: bold;
				width: fit-content;
				max-width: 80%;
				text-align: left;

				&.chicken {
					background-color: var(--color-primary);
					border-radius: 1rem 1rem 1rem 0;
				}

				&.user {
					border-radius: 1rem 1rem 0 1rem;
					background-color: var(--color-neutral);
					align-self: flex-end;
				}
			}
		}

		form {
			display: flex;
			padding: 1rem;
			gap: 1ch;
			grid-template-columns: auto auto;

			button {
				display: inline-grid;
				place-content: center;
				background-color: var(--color-secondary);
				border: none;
				height: 2rem;
				width: 2rem;
				aspect-ratio: 1 / 1;
				cursor: pointer;
				box-sizing: border-box;
			}

			input {
				width: 100%;
				padding-inline: 0.5rem;
			}
		}

		.notice {
			margin: 0;
		}

		&:not(.isTyping) {
			.typingNotice {
				display: none;
			}
		}

		.typingNotice {
			display: flex;
			display: flex;
			align-items: baseline;
			gap: 1ch;
			padding-left: 1.5em;

			.loadingContainer {
				position: relative;
				width: 110px;
				align-items: baseline;

				span {
					height: 0.25em;
					width: 0.25em;
					border-radius: 50%;
					background: black;
					float: left;
					margin: 0 3px;
					background: #ffe874;
				}
				.ball1 {
					z-index: 1;
					-moz-animation: bounce 2s infinite ease-in-out;
					-webkit-animation: bounce 2s infinite ease-in-out;
				}
				.ball2 {
					-moz-animation: bounce 2s infinite ease-in-out;
					-webkit-animation: bounce 2s infinite ease-in-out;
					-webkit-animation-delay: 0.5s;
					animation-delay: 0.5s;
				}
				.ball3 {
					-moz-animation: bounce 2s infinite ease-in-out;
					-webkit-animation: bounce 2s infinite ease-in-out;
					-webkit-animation-delay: 1s;
					animation-delay: 1s;
				}
				.ball4 {
					-moz-animation: bounce 2s infinite ease-in-out;
					-webkit-animation: bounce 2s infinite ease-in-out;
					-webkit-animation-delay: 1.5s;
					animation-delay: 1.5s;
				}
			}
		}
	}

	@-moz-keyframes bounce {
		0%,
		15% {
			-moz-transform: translate(0, 0);
		}
		50% {
			-moz-transform: translate(0, -0.5rem);
			background: #00454d;
		}
		85%,
		100% {
			-moz-transform: translate(0, 0);
		}
	}
	@-webkit-keyframes bounce {
		0%,
		20% {
			-webkit-transform: translate(0, 0);
		}
		50% {
			-webkit-transform: translate(0, -0.5rem);
			background: #00454d;
		}
		80%,
		100% {
			-webkit-transform: translate(0, 0);
		}
	}
</style>

<div class='chat'>
	<button
		class='toggle toggle-chat'
		aria-label='Toggle Chat'
		title='Chat with us'
		data-status='default'
	>
		<div class='default'>
			<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'
				><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
				<path
					d='M123.6 391.3c12.9-9.4 29.6-11.8 44.6-6.4c26.5 9.6 56.2 15.1 87.8 15.1c124.7 0 208-80.5 208-160s-83.3-160-208-160S48 160.5 48 240c0 32 12.4 62.8 35.7 89.2c8.6 9.7 12.8 22.5 11.8 35.5c-1.4 18.1-5.7 34.7-11.3 49.4c17-7.9 31.1-16.7 39.4-22.7zM21.2 431.9c1.8-2.7 3.5-5.4 5.1-8.1c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208s-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6c-15.1 6.6-32.3 12.6-50.1 16.1c-.8 .2-1.6 .3-2.4 .5c-4.4 .8-8.7 1.5-13.2 1.9c-.2 0-.5 .1-.7 .1c-5.1 .5-10.2 .8-15.3 .8c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4c4.1-4.2 7.8-8.7 11.3-13.5c1.7-2.3 3.3-4.6 4.8-6.9l.3-.5z'
				></path></svg
			>
		</div>
		<div class='chat-with-us'>
			<span class='wave'>&#128075;</span> Chat with us
		</div>
		<div class='message'>
			<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'
				><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
				<path
					d='M168.2 384.9c-15-5.4-31.7-3.1-44.6 6.4c-8.2 6-22.3 14.8-39.4 22.7c5.6-14.7 9.9-31.3 11.3-49.4c1-12.9-3.3-25.7-11.8-35.5C60.4 302.8 48 272 48 240c0-79.5 83.3-160 208-160s208 80.5 208 160s-83.3 160-208 160c-31.6 0-61.3-5.5-87.8-15.1zM26.3 423.8c-1.6 2.7-3.3 5.4-5.1 8.1l-.3 .5c-1.6 2.3-3.2 4.6-4.8 6.9c-3.5 4.7-7.3 9.3-11.3 13.5c-4.6 4.6-5.9 11.4-3.4 17.4c2.5 6 8.3 9.9 14.8 9.9c5.1 0 10.2-.3 15.3-.8l.7-.1c4.4-.5 8.8-1.1 13.2-1.9c.8-.1 1.6-.3 2.4-.5c17.8-3.5 34.9-9.5 50.1-16.1c22.9-10 42.4-21.9 54.3-30.6c31.8 11.5 67 17.9 104.1 17.9c141.4 0 256-93.1 256-208S397.4 32 256 32S0 125.1 0 240c0 45.1 17.7 86.8 47.7 120.9c-1.9 24.5-11.4 46.3-21.4 62.9zM144 272a32 32 0 1 0 0-64 32 32 0 1 0 0 64zm144-32a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm80 32a32 32 0 1 0 0-64 32 32 0 1 0 0 64z'
				></path></svg
			>
		</div>
	</button>

	<div class='window closed' data-status='setup'>
		<button
			class='minimize toggle-chat'
			title='Minimize Chat'
			aria-label='Minimize Chat'
			><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'
				><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
				<path
					d='M32 416c-17.7 0-32 14.3-32 32s14.3 32 32 32l448 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L32 416z'
				></path></svg
			></button
		>
		<div class='info default'>
			<svg
				class='icon'
				xmlns='http://www.w3.org/2000/svg'
				viewBox='0 0 512 512'
				><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
				<path
					d='M256 48C141.1 48 48 141.1 48 256l0 40c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-40C0 114.6 114.6 0 256 0S512 114.6 512 256l0 144.1c0 48.6-39.4 88-88.1 88L313.6 488c-8.3 14.3-23.8 24-41.6 24l-32 0c-26.5 0-48-21.5-48-48s21.5-48 48-48l32 0c17.8 0 33.3 9.7 41.6 24l110.4 .1c22.1 0 40-17.9 40-40L464 256c0-114.9-93.1-208-208-208zM144 208l16 0c17.7 0 32 14.3 32 32l0 112c0 17.7-14.3 32-32 32l-16 0c-35.3 0-64-28.7-64-64l0-48c0-35.3 28.7-64 64-64zm224 0c35.3 0 64 28.7 64 64l0 48c0 35.3-28.7 64-64 64l-16 0c-17.7 0-32-14.3-32-32l0-112c0-17.7 14.3-32 32-32l16 0z'
				></path></svg
			>
			<div>
				<p class='name'>Hi! &#128075;</p>
				<p class='title'>Chat with a representative</p>
			</div>
		</div>
		<div class='info chicken'>
			<Picture
				class='icon'
				src={Clucky}
				alt='Clucky the chicken in a field'
				height='56'
				width='56'
				formats={['webp', 'avif', 'jpeg']}
			/>
			<div>
				<p class='name'>Clucky</p>
				<p class='title'>Support Representative</p>
			</div>
		</div>
		<div class='info chicken'>
			<Picture
				class='icon'
				src={Scramble}
				alt='Scramble the rooster crowing'
				height='56'
				width='56'
				formats={['webp', 'avif', 'jpeg']}
			/>
			<div>
				<p class='name'>Scramble</p>
				<p class='title'>Tech Support</p>
			</div>
		</div>
		<div class='info chicken'>
			<Picture
				class='icon'
				src={Nugget}
				alt='Nugget the chick sitting in grass'
				height='56'
				width='56'
				formats={['webp', 'avif', 'jpeg']}
			/>
			<div>
				<p class='name'>Nugget</p>
				<p class='title'>Support Intern</p>
			</div>
		</div>
		<div class='messages'></div>
		<p class='typingNotice'>
			<span class='typingNoticeText'>is typing</span>
			<span class='loadingContainer'>
				<span class='ball1'></span>
				<span class='ball2'></span>
				<span class='ball3'></span>
				<span class='ball4'></span>
			</span>
		</p>
		<form class='chat-form'>
			<input aria-label='Send a message' type='text' />
			<button aria-label='Send message'
				><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'
					><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
					<path
						d='M16.1 260.2c-22.6 12.9-20.5 47.3 3.6 57.3L160 376l0 103.3c0 18.1 14.6 32.7 32.7 32.7c9.7 0 18.9-4.3 25.1-11.8l62-74.3 123.9 51.6c18.9 7.9 40.8-4.5 43.9-24.7l64-416c1.9-12.1-3.4-24.3-13.5-31.2s-23.3-7.5-34-1.4l-448 256zm52.1 25.5L409.7 90.6 190.1 336l1.2 1L68.2 285.7zM403.3 425.4L236.7 355.9 450.8 116.6 403.3 425.4z'
					></path></svg
				></button
			>
		</form>
		<p class='notice'>Your information is never saved.</p>
	</div>
</div>

<script is:inline>
	function toggleChat() {
		const chat = document.querySelector('.window')

		chat.classList.toggle('closed')
	}
	document.addEventListener('click', (event) => {
		if (!event.target.closest('.toggle-chat')) return

		toggleChat()
	})
	function addMessage(message, type = 'chicken') {
		const messages = document.querySelector('.messages')

		const p = document.createElement('p')
		p.textContent = message
		p.classList.add(type)
		messages.appendChild(p)
		p.scrollIntoView({ behavior: 'smooth' })
	}

	const chatButton = document.querySelector('.toggle')
	chatButton.addEventListener(
		'click',
		() => {
			// Wait 0.5 seconds and add a welcome message
			setTimeout(() => {
				addMessage(
					'Hi! Please type your first name, so we know how to address you.'
				)
			}, 500)
		},
		{ once: true }
	)

	const form = document.querySelector('form')
	let name = ''
	let repName = ''
	const chickenSounds = [
		'bawk-bawk',
		'bawk',
		'bawwwk',
		'bok-bok',
		'bok',
		'brrk',
		'buk-buk',
		'cackle',
		'cheep',
		'chirp',
		'chirr',
		'chirrup',
		'chit-chat',
		'chuckle',
		'churt',
		'cluck-cluck',
		'cluck',
		'coo',
		'crow',
		'gawp',
		'hoot',
		'kek-kek',
		'peck-peck',
		'peep-peep',
		'peep',
		'prrrt',
		'quawk',
		'scree',
		'squawk',
		'trill'
	]
	const resetForm = () => {
		form.querySelector('input').value = ''
		form.querySelector('input').focus()
	}
	const inputValue = () => {
		const input = form.querySelector('input')
		const message = input.value
		return message
	}
	const chatStatus = (newStatus = null) => {
		const chat = document.querySelector('.window')
		if (newStatus) {
			chat.dataset.status = newStatus
		}
		return chat.dataset.status
	}
	const setIsTyping = (isTyping = false) => {
		const chat = document.querySelector('.window')
		if (isTyping) {
			chat.classList.add('isTyping')
		} else {
			chat.classList.remove('isTyping')
		}
	}
	const generateMessage = (message) => {
		// Get the number of words in the current message
		const words = message.split(' ')
		const wordCount = words.length
		const targetWordCount = Math.max(
			wordCount + Math.floor(Math.random() * 21) - 10,
			6
		)
		let newMessage = ''
		for (let i = 0; i < targetWordCount; i++) {
			let word =
				chickenSounds[Math.floor(Math.random() * chickenSounds.length)]
			// Make it a 1 in 10 chance that a word is replaced with the name variable
			if (Math.random() < 0.1) {
				word = name
			}

			// Capitlize new sentences
			const lastTwoCharacters = newMessage.slice(-2)
			if (
				!lastTwoCharacters ||
				lastTwoCharacters === '. ' ||
				lastTwoCharacters === '! ' ||
				lastTwoCharacters === '? '
			) {
				word = word.charAt(0).toUpperCase() + word.slice(1)
			}

			newMessage += word

			// Make it a 1 in 10 chance that punctuation is added
			if (Math.random() < 0.1 || i === targetWordCount - 1) {
				const punctuation = [',', '.', '!', '?']
				const selectedPunctuation =
					punctuation[Math.floor(Math.random() * punctuation.length)]
				newMessage += selectedPunctuation
			}

			// If this is not the last word, add a space
			if (i < targetWordCount - 1) {
				newMessage += ' '
			}
		}

		return newMessage
	}
	const setName = (message) => {
		name = message
		setTimeout(() => {
			addMessage(
				`Hello ${name}! Please describe what you are chatting about so we can connect you with the right support representative.`
			)
		}, 500)
		chatStatus('reason')
		resetForm()
	}
	const setStatusToChat = () => {
		chatStatus('chat')

		// replace the shown name from Hi! to the repName
		const info = document.querySelector('.info')
		const name = info.querySelector('.name')
		name.textContent = repName

		const title = info.querySelector('.title')
		title.textContent = 'Chicken Support'

		// Add the chicken's name to before the typing message
		const typingNoticeText = document.querySelector('.typingNoticeText')
		typingNoticeText.textContent = `${repName} ${typingNoticeText.textContent}`

		// Add a new "notice" before the existing one that says "Chatting with [repName]"
		const notice = document.querySelector('.notice')
		const newNotice = document.createElement('p')
		newNotice.textContent = `Chatting with ${repName}`

		// Generate a message
		generateChatMessageResponse('Message')

		resetForm()
	}
	const setStatusToWait = () => {
		chatStatus('wait')

		setTimeout(() => {
			addMessage(
				'We are connecting you with a support representative now!'
			)
		}, 500)
		setTimeout(() => {
			addMessage(
				'Estimated wait time, 2 minutes: Thank you for your patience.'
			)
		}, 1000)
		setTimeout(() => {
			const infoPanels = document.querySelectorAll('.info.chicken')
			// pick a random panel to keep
			const repPanel =
				infoPanels[Math.floor(Math.random() * infoPanels.length)]
			// remove the other panels
			infoPanels.forEach((panel) => {
				if (panel === repPanel) return
				panel.remove()
			})

			// randomly select a name from repNames
			repName = repPanel.querySelector('.name').textContent
			setStatusToChat()
		}, 10000)
		resetForm()
	}
	const generateChatMessageResponse = async (message) => {
		// set is typing
		setIsTyping(true)

		let numberOfResponses = 1
		// make it a 20% chance that the chicken responds with more than one message
		if (Math.random() < 0.2) {
			// Pick a random number between 1 and 3
			numberOfResponses = Math.floor(Math.random() * 3) + 1
		}

		for (let i = 0; i < numberOfResponses; i++) {
			const responseMessage = generateMessage(message)
			// Get the number of words in the responseMessage
			const words = responseMessage.split(' ')
			const wordCount = words.length

			// Create a delay for the message adding 0.25 seconds per word
			await new Promise((resolve) => setTimeout(resolve, wordCount * 250))

			addMessage(responseMessage, 'chicken')

			setIsTyping()

			// If this is not the last message, wait 1.5 seconds before sending the next message
			if (i < numberOfResponses - 1) {
				await new Promise((resolve) => setTimeout(resolve, 1500))
			}
		}
	}
	const sendRandomMessage = (message) => {
		generateChatMessageResponse(message)
		resetForm()
	}
	function chatSubmit(event) {
		event.preventDefault()
		const message = inputValue()
		addMessage(message, 'user')
		if (chatStatus() === 'setup') return setName(message)
		if (chatStatus() === 'reason') return setStatusToWait()
		sendRandomMessage(message)
	}
	form.addEventListener('submit', chatSubmit)
</script>
